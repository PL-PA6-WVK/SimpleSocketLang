Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    COMMA
    DIVISION
    DOT
    ELSE
    GT
    GTE
    IF
    LT
    LTE
    MODULO
    MULTIPLICATION
    OR
    PLUS
    SEMICOLON
    SPACE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> ID EQUALS expression
Rule 2     statement -> expression
Rule 3     expression -> LPAREN expression RPAREN
Rule 4     expression -> NUMBER
Rule 5     expression -> ID

Terminals, with rules where they appear

AND                  : 
COMMA                : 
DIVISION             : 
DOT                  : 
ELSE                 : 
EQUALS               : 1
GT                   : 
GTE                  : 
ID                   : 1 5
IF                   : 
LPAREN               : 3
LT                   : 
LTE                  : 
MODULO               : 
MULTIPLICATION       : 
NUMBER               : 4
OR                   : 
PLUS                 : 
RPAREN               : 3
SEMICOLON            : 
SPACE                : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . ID EQUALS expression
    (2) statement -> . expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . NUMBER
    (5) expression -> . ID

    ID              shift and go to state 2
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5

    statement                      shift and go to state 1
    expression                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> ID . EQUALS expression
    (5) expression -> ID .

    EQUALS          shift and go to state 6
    $end            reduce using rule 5 (expression -> ID .)


state 3

    (2) statement -> expression .

    $end            reduce using rule 2 (statement -> expression .)


state 4

    (3) expression -> LPAREN . expression RPAREN
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . NUMBER
    (5) expression -> . ID

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    ID              shift and go to state 8

    expression                     shift and go to state 7

state 5

    (4) expression -> NUMBER .

    $end            reduce using rule 4 (expression -> NUMBER .)
    RPAREN          reduce using rule 4 (expression -> NUMBER .)


state 6

    (1) statement -> ID EQUALS . expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . NUMBER
    (5) expression -> . ID

    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    ID              shift and go to state 8

    expression                     shift and go to state 9

state 7

    (3) expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 10


state 8

    (5) expression -> ID .

    RPAREN          reduce using rule 5 (expression -> ID .)
    $end            reduce using rule 5 (expression -> ID .)


state 9

    (1) statement -> ID EQUALS expression .

    $end            reduce using rule 1 (statement -> ID EQUALS expression .)


state 10

    (3) expression -> LPAREN expression RPAREN .

    $end            reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 3 (expression -> LPAREN expression RPAREN .)

